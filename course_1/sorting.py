# Uses python3
import sys
import random

"""
Improving Quick Sort

–í–≤–µ–¥–µ–Ω–∏–µ
–¶–µ–ª—å —ç—Ç–æ–π –ø—Ä–æ–±–ª–µ–º—ã - –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Ä–∞–Ω–¥–æ–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –±—ã—Å—Ç—Ä–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Ç–∞–∫, 
—á—Ç–æ–±—ã –æ–Ω–∞ —Ä–∞–±–æ—Ç–∞–ª–∞ –±—ã—Å—Ç—Ä–æ –¥–∞–∂–µ —Å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è–º–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º–∏ –º–Ω–æ–≥–æ —Ä–∞–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤. 

–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏

–¢–∞—Å–∫–∞:
–ß—Ç–æ–±—ã –∑–∞—Å—Ç–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –±—ã—Å—Ç—Ä–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ 
—Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏, 
–≤–∞—à–∞ —Ü–µ–ª—å - –∑–∞–º–µ–Ω–∏—Ç—å –¥–≤—É—Ö—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π —Ä–∞–∑–¥–µ–ª –Ω–∞ —Ç—Ä–µ—Ö—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π. 
–¢–æ –µ—Å—Ç—å –≤–∞—à–∞ –Ω–æ–≤–∞—è –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ —Ä–∞–∑–±–∏—Ç—å –º–∞—Å—Å–∏–≤ –Ω–∞ —Ç—Ä–∏ —á–∞—Å—Ç–∏: <ùë• —á–∞—Å—Ç—å, = ùë• —á–∞—Å—Ç—å –∏> ùë• —á–∞—Å—Ç—å. 

–§–æ—Ä–º–∞—Ç –∏–Ω–ø—É—Ç–∞
–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ–¥–µ—Ä–∂–∏—Ç —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ ger. 
–í —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–µ –∑–∞–ø–∏—Å–∞–Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ ùëõ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª ùëé0, ùëé1,. . . , ùëéùëõ ‚àí 1. 

–í—ã—Ö–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–∞—Ç. 
–í—ã–≤–µ–¥–∏—Ç–µ —ç—Ç—É –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –ø–æ—Ä—è–¥–∫–µ –Ω–µ—É–±—ã–≤–∞–Ω–∏—è. 

Example:
5
23922

22239

"""


def partition3(a, l, r):
    # left(<x) - m1 (=x) m2 - right(>x)
    pivot = a[l]
    i = l
    m1 = l
    m2 = r
    while i <= m2:
        if a[i] < pivot:
            a[i], a[m1] = a[m1], a[i]
            m1 += 1
            i += 1
        elif a[i] > pivot:
            a[i], a[m2] = a[m2], a[i]
            m2 -= 1
        else:
            i += 1
    return m1, m2


# def partition2(a, l, r):
#     x = a[l]
#     j = l
#     for i in range(l + 1, r + 1):
#         if a[i] <= x:
#             j += 1
#             a[i], a[j] = a[j], a[i]
#     a[l], a[j] = a[j], a[l]
#     return j

#
# def randomized_quick_sort(a, l, r):
#     if l >= r:
#         return
#     k = random.randint(l, r)
#     a[l], a[k] = a[k], a[l]
#     m = partition2(a, l, r)
#     randomized_quick_sort(a, l, m - 1);
#     randomized_quick_sort(a, m + 1, r);


def randomized_quick_sort(a, l, r):
    if l >= r:
        return

    k = random.randint(l, r)
    a[l], a[k] = a[k], a[l]
    # use partition3
    middle1, middle2 = partition3(a, l, r)
    randomized_quick_sort(a, l, middle1 - 1)
    randomized_quick_sort(a, middle2 + 1, r)


if __name__ == '__main__':
    input = sys.stdin.read()
    n, *a = list(map(int, input.split()))
    # a = [2, 3, 9, 2, 2]
    # n = len(a)
    randomized_quick_sort(a, 0, n - 1)
    for x in a:
        print(x, end=' ')
