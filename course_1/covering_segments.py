# Uses python3
import sys
from collections import namedtuple

"""
ะะฟะธัะฐะฝะธะต ะฟัะพะฑะปะตะผั:
ะั ะฝะตัะตัะต ะพัะฒะตัััะฒะตะฝะฝะพััั ะทะฐ ัะฑะพั ะฟะพะดะฟะธัะตะน ะฒัะตั ะฐัะตะฝะดะฐัะพัะพะฒ ะพะฟัะตะดะตะปะตะฝะฝะพะณะพ ะทะดะฐะฝะธั. 
ะะฐะถะดะพะผั ะฐัะตะฝะดะฐัะพัั ะธะทะฒะตััะตะฝ ะฟะตัะธะพะด ะฒัะตะผะตะฝะธ, ะฒ ัะตัะตะฝะธะต ะบะพัะพัะพะณะพ ะพะฝ ะธะปะธ ะพะฝะฐ ะฝะฐัะพะดะธััั ะดะพะผะฐ. 
ะั ัะพัะธัะต ัะพะฑัะฐัั ะฒัะต ะฟะพะดะฟะธัะธ, ะฟะพัะตัะธะฒ ะทะดะฐะฝะธะต ะบะฐะบ ะผะพะถะฝะพ ัะตะถะต.
ะะฐัะตะผะฐัะธัะตัะบะฐั ะผะพะดะตะปั ััะพะน ะฟัะพะฑะปะตะผั ัะปะตะดัััะฐั. 
ะะฐะผ ะดะฐะตััั ะฝะฐะฑะพั ัะตะณะผะตะฝัะพะฒ ะฝะฐ ะปะธะฝะธะธ, ะธ ะฒะฐัะฐ ัะตะปั - ะพัะผะตัะธัั ะบะฐะบ ะผะพะถะฝะพ ะผะตะฝััะต ัะพัะตะบ ะฝะฐ ะปะธะฝะธะธ, 
ััะพะฑั ะบะฐะถะดัะน ัะตะณะผะตะฝั ัะพะดะตัะถะฐะป ัะพัั ะฑั ะพะดะฝั ะพัะผะตัะตะฝะฝัั ัะพัะบั. 

ะะฐะดะฐัะฐ:
ะะฐะฝ ะฝะฐะฑะพั ะธะท ๐ ัะตะณะผะตะฝัะพะฒ {[๐0, ๐0], [๐1, ๐1], ..., [๐๐ โ 1, ๐๐ โ 1]} ั ัะตะปัะผะธ ะบะพะพัะดะธะฝะฐัะฐะผะธ ะฝะฐ ะฟััะผะพะน, 
ะฝะฐะนะดะธัะต ะผะธะฝะธะผะฐะปัะฝะพะต ัะธัะปะพ ๐ ัะพัะตะบ ัะฐะบะพะต, ััะพ ะบะฐะถะดะฐั ัะตะณะผะตะฝั ัะพะดะตัะถะธั ัะพัั ะฑั ะพะดะฝั ัะพัะบั. 
ะขะพ ะตััั ะฝะฐะนะดะธัะต ัะฐะบะพะน ะฝะฐะฑะพั ัะตะปัั ัะธัะตะป ๐ ะผะธะฝะธะผะฐะปัะฝะพะณะพ ัะฐะทะผะตัะฐ, 
ััะพ ะดะปั ะปัะฑะพะณะพ ะพััะตะทะบะฐ [๐๐, ๐๐] ะฝะฐะนะดะตััั ัะพัะบะฐ ๐ฅ โ ๐ ัะฐะบะฐั, ััะพ ๐๐ โค๐ฅโค๐ฅ. 

Input format:
ะะตัะฒะฐั ัััะพะบะฐ ะฒัะพะดะฝัั ะดะฐะฝะฝัั ัะพะดะตัะถะธั ะบะพะปะธัะตััะฒะพ ๐ ัะตะณะผะตะฝัะพะฒ. 
ะะฐะถะดะฐั ะธะท ัะปะตะดัััะธั ัััะพะบ ัะพะดะตัะถะธั ะดะฒะฐ ัะตะปัั ัะธัะปะฐ ๐๐ ะธ ๐๐ (ัะฐะทะดะตะปะตะฝะฝัั ะฟัะพะฑะตะปะพะผ), 
ะพะฟัะตะดะตะปัััะธั ะบะพะพัะดะธะฝะฐัั ะบะพะฝะตัะฝัั ัะพัะตะบ ๐-ะณะพ ัะตะณะผะตะฝัะฐ. 

Output format:
ะัะฒะตะดะธัะต ะผะธะฝะธะผะฐะปัะฝะพะต ะบะพะปะธัะตััะฒะพ ัะพัะตะบ ะฒ ะฟะตัะฒะพะน ัััะพะบะต ะธ ัะตะปัะต ะบะพะพัะดะธะฝะฐัั ๐ ัะพัะตะบ (ัะตัะตะท ะฟัะพะฑะตะป) ะฒะพ ะฒัะพัะพะน ัััะพะบะต. 
ะั ะผะพะถะตัะต ะฒัะฒะพะดะธัั ัะพัะบะธ ะฒ ะปัะฑะพะผ ะฟะพััะดะบะต. 
ะัะปะธ ัะฐะบะธั ะฝะฐะฑะพัะพะฒ ัะพัะตะบ ะผะฝะพะณะพ, ะฒั ะผะพะถะตัะต ะฒัะฒะตััะธ ะปัะฑะพะน ะฝะฐะฑะพั. 
(ะะตัััะดะฝะพ ะฒะธะดะตัั, ััะพ ะฒัะตะณะดะฐ ัััะตััะฒัะตั ะฝะฐะฑะพั ัะพัะตะบ ะผะธะฝะธะผะฐะปัะฝะพะณะพ ัะฐะทะผะตัะฐ, 
ะฟัะธ ะบะพัะพัะพะผ ะฒัะต ะบะพะพัะดะธะฝะฐัั ัะพัะตะบ ัะฒะปััััั ัะตะปัะผะธ ัะธัะปะฐะผะธ.) 

ะัะธะผะตั 1:
Input
3
1 3
2 5
3 6
Output:
1
3

ะัะธะผะตั 2:
Input
4
4 7
1 3
2 5
5 6
Output:
2
3 6
"""

Segment = namedtuple('Segment', 'start end')


def optimal_points(segments):
    points = []
    # write your code here
    for s in segments:
        points.append(s.start)
        points.append(s.end)
    return points


if __name__ == '__main__':
    input = sys.stdin.read()
    n, *data = map(int, input.split())
    segments = list(map(lambda x: Segment(x[0], x[1]), zip(data[::2], data[1::2])))
    points = optimal_points(segments)
    print(len(points))
    print(*points)
