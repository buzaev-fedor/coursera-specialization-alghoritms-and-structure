# python3
"""
–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:
–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ ùëë –º–∏–ª—è—Ö –æ—Ç –≤–∞—à–µ–≥–æ —Ä–æ–¥–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞.
–í–∞—à–∞ –º–∞—à–∏–Ω–∞ –º–æ–∂–µ—Ç –ø—Ä–æ–µ—Ö–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ –º–∏–ª—å —Å –ø–æ–ª–Ω—ã–º –±–∞–∫–æ–º, –∏ –≤—ã –Ω–∞—á–∏–Ω–∞–µ—Ç–µ —Å –ø–æ–ª–Ω—ã–º –±–∞–∫–æ–º.
–ü–æ –ø—É—Ç–∏ –∑–∞–ø—Ä–∞–≤–∫–∏ –±—É–¥—É—Ç –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è—Ö stop1, stop2,. . . , stopùëõ –æ—Ç –≤–∞—à–µ–≥–æ —Ä–æ–¥–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞.
–ö–∞–∫–æ–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–∞–≤–æ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ?

–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞:
–í –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –∑–∞–ø–∏—Å–∞–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ. –í–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–µ –∑–∞–ø–∏—Å–∞–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.
–í —Ç—Ä–µ—Ç—å–µ–π —Å—Ç—Ä–æ–∫–µ —É–∫–∞–∑–∞–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ. –ù–∞–∫–æ–Ω–µ—Ü, –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞ stop1, stop2,. . . , stopùëõ.

–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞:
–ï—Å–ª–∏ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç—å, —á—Ç–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –≥–æ—Ä–æ–¥–∞–º–∏ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–∏–ª–∏,
–∞–≤—Ç–æ–º–æ–±–∏–ª—å –º–æ–∂–µ—Ç –ø—Ä–æ–µ—Ö–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ –º–∏–ª—å —Å –ø–æ–ª–Ω—ã–º –±–∞–∫–æ–º,
–∞ –∑–∞–ø—Ä–∞–≤–æ—á–Ω—ã–µ —Å—Ç–∞–Ω—Ü–∏–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è—Ö stop1, stop2,. . . , –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ùëõ –ø–æ –ø—É—Ç–∏,
–≤—ã–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–∞–≤–æ–∫.
–ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –º–∞—à–∏–Ω–∞ –∑–∞–≤–æ–¥–∏—Ç—Å—è —Å –ø–æ–ª–Ω—ã–º –±–∞–∫–æ–º. –ï—Å–ª–∏ –¥–æ–±—Ä–∞—Ç—å—Å—è –¥–æ –º–µ—Å—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ, –≤—ã–≤–µ–¥–∏—Ç–µ ‚àí1.

–ü—Ä–∏–º–µ—Ä:
input:
950 - distance
400 - tank
4 - n stops
200 375 550 750 - array of oil stations

Output:
2
"""
import sys


def compute_min_refills(distance, tank, stops):
    n = len(stops)
    stops = [0] + stops
    stops.append(distance)
    num_refills, current_refills = 0, 0
    while current_refills <= n:
        last_refill = current_refills
        while current_refills <= n and (stops[current_refills + 1] - stops[last_refill]) <= tank:
            current_refills += 1
        if current_refills <= n:
            num_refills += 1
        if current_refills == last_refill:
            return -1
    return num_refills


if __name__ == '__main__':
    d, m, _, *stops = map(int, sys.stdin.read().split())
    # d = 950
    # m = 400
    # stops = [200, 375, 550, 750]
    print(compute_min_refills(d, m, stops))
